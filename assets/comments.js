import "./styles/comments.css";

// Importing all necessary packages

import FroalaEditor from "froala-editor";
import 'froala-editor/css/froala_editor.pkgd.min.css';
import 'froala-editor/css/froala_style.min.css';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import utc from "dayjs/plugin/utc";
import CommentRequests from "./comment-requests"
import Utilities from "./utilities";

// Load your languages
import 'froala-editor/js/languages/en_gb.js';

// Load all plugins, or specific ones
import 'froala-editor/js/plugins.pkgd.min.js';
import 'froala-editor/css/plugins.pkgd.min.css';
import 'froala-editor/css/themes/dark.min.css';
import UserRequests from "./user-requests";

window.FroalaEditor = FroalaEditor;

/**
 * @param editor Editor instance
 * @param error Error object generated by Froala
 * @param response Response object coming from the server
 */
function froalaDisplayError(editor, error, response) {
    alert(`Error ${error.code}: ${error.message}`);
}

window.froalaDisplayError = froalaDisplayError;

dayjs.extend(relativeTime);

// Get the infos of the current connected user
//const currentUser = await getCurrentUser();
const currentUser = await Utilities.getCurrentUser();

const commentFormButtons = document.querySelectorAll(".comment-button"),
    commentDates = document.querySelectorAll(".comment-date"),
    commentMenuContainers = document.querySelectorAll(".comment-menu-container"),
    commentMenuButtons = document.querySelectorAll(".comment-menu-icon"),
    commentInputs = document.querySelectorAll(".comment-input"),
    commentReplyButtons = document.querySelectorAll(".comment-reply"),
    commentBars = document.querySelectorAll(".comment-bar"),
    editCommentButtons = document.querySelectorAll(".edit-comment"),
    commentContents = document.querySelectorAll(".fr-view"),
    tagLinks = document.querySelectorAll("p:has(.tag-link)"),
    deleteCommentButtons = document.querySelectorAll(".delete-comment"),
    commentMenuReactions = document.querySelectorAll(".comment-menu-reacts"),
    commentReactions = document.querySelectorAll(".comment-reactions"),
    commentReactionsContainers = document.querySelectorAll(".comment-reactions-container"),
    commentReactionsContainerBlocks = document.querySelectorAll(".comment-reactions-container-block"),
    commentReactionsContainerClose = document.querySelectorAll(".comment-reactions-container-close"),
    commentLikeButtons = document.querySelectorAll(".comment-like"),
    commentDislikeButtons = document.querySelectorAll(".comment-dislike"),
    likesNumbers = document.querySelectorAll(".comment-likes-block .likes-number"),
    dislikesNumbers = document.querySelectorAll(".comment-dislikes-block .dislikes-number"),
    menuLikesNumbers = document.querySelectorAll(".comment-menu-likes .likes-number"),
    menuDislikesNumbers = document.querySelectorAll(".comment-menu-dislikes .dislikes-number"),
    reactionsBlocksContainer = document.querySelectorAll(".reactions-blocks"),
    commentMenuDates = document.querySelectorAll(".comment-menu-date"),
    hideCommentButtons = document.querySelectorAll(".hide-comment"),
    showCommentButtons = document.querySelectorAll(".show-comment"),
    createCommentForm =  document.getElementById("create-comment-bar"),
    reportCommentButtons = document.querySelectorAll(".report-comment"),
    blockUserButtons = document.querySelectorAll(".block-author"),
    unblockUserButtons = document.querySelectorAll(".unblock-author");

const onRepliesPage = document.querySelector(".comments") === null,
    onHomePage = document.querySelector(".stories-block") !== null;

// Instantiate the Froala Editor on all CommentRequests Inputs of the page and store them in an array
/**
 * @type {FroalaEditor[]}
 */
let commentEditors = [];
let commentInputsIndex = 0;

for (const commentInput of commentInputs) {
    let editor = new FroalaEditor(`#${commentInput.getAttribute("id")}`, {
        toolbarInline: true,
        toolbarVisibleWithoutSelection: true,
        charCounterCount: false,
        imageUploadMethod: 'POST',
        imageUploadURL: '/comment/upload/images',
        imageAllowedTypes: ['jpeg', 'jpg', 'png'],
        imageMaxSize: 1024 * 1024 * 3,
        videoUploadMethod: 'POST',
        videoUploadURL: '/comment/upload/videos',
        videoAllowedTypes: ['mp4', 'gif', 'ogg', 'webm'],
        videoMaxSize: 1024 * 1024 * 10,
        fileUploadMethod: 'POST',
        fileUploadURL: '/comment/upload/files',
        fileAllowedTypes: ['application/pdf'],
        fileMaxSize: 1024 * 1024 * 5,
        placeholderText: `Type your ${commentInputsIndex === 0 ? "comment" : "reply"}, ${currentUser.username}`,
        events: {
            contentChanged: checkAllEditorsContents,
            "image.removed": function ($img) {
                const url = $img.attr("src");

                fetch("/delete/file", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest' // Important for Symfony to detect AJAX request
                    },
                    body: JSON.stringify({url: url})
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
            }
        },
        "image.replaced": function ($img, response) {
            const url = response.link;

            fetch("/delete/file", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest' // Important for Symfony to detect AJAX request
                },
                body: JSON.stringify({url: url})
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
    })

    commentEditors.push(editor);
    commentInputsIndex++;
}

console.log(commentEditors.length, commentFormButtons.length)
// Check if the editors does not have empty content using a visual indication
function checkAllEditorsContents() {
    for (let i = 0; i < commentEditors.length; i++) {
        if (commentEditors[i].html) {
            let content = commentEditors[i].html.get(true);

            if (content.trim().length <= 0) {
                commentFormButtons[i].style.cursor = "initial";
                commentFormButtons[i].style.color = "inherit";
            } else {
                commentFormButtons[i].style.color = "var(--principal-color)";
                commentFormButtons[i].style.cursor = "pointer";
            }
        } else {
            commentFormButtons[i].style.cursor = "initial";
            commentFormButtons[i].style.color = "inherit";
        }
    }
}

// Initial check
checkAllEditorsContents();

// Change the format of the comment dates in a reduced form, store all dates and
// the dates' texts in arrays
let allDates = [],
    initialDateTexts = [];

for (const commentDate of commentDates) {
    allDates.push(commentDate.innerText);
    commentDate.innerHTML = CommentRequests.reduceDateFormat(dayjs(commentDate.innerHTML).fromNow());
}

for (const commentMenuDate of commentMenuDates) {
    initialDateTexts.push(commentMenuDate.innerText);
}

if (!onHomePage) {

    for (let i = 0; i < commentMenuButtons.length; i++) {
        // Display the comment menu block when the user clicks on the three dots
        commentMenuButtons[i].addEventListener("click", () => {
            commentMenuContainers[i].style.display = "flex";
        });

        // Make the comment menu block disappear upon clicking on it
        commentMenuContainers[i].addEventListener("click", function (evt) {
            evt.stopPropagation();
            this.style.display = "none";
        })

        commentReplyButtons[i].addEventListener("click", function () {
            if (onRepliesPage) {
                if (i !== 0) {
                    commentBars[i - 1].style.display = "flex";
                    commentBars[i - 1].removeAttribute("toBeEdited");
                    commentEditors[i - 1].html.set("");
                } else {
                    location.href = location.href.split("#")[0] + `#${commentBars[commentBars.length - 1].getAttribute("id")}`;
                    commentBars[commentBars.length - 1].removeAttribute("toBeEdited");
                    commentEditors[commentBars.length - 1].html.set("");
                }
            } else {
                commentBars[i + 1].style.display = "flex";
                commentBars[i + 1].removeAttribute("toBeEdited");
                commentEditors[i + 1].html.set("");
            }
        })

        editCommentButtons[i].addEventListener("click", function () {
            if (onRepliesPage) {
                if (i !== 0) {
                    commentBars[i - 1].style.display = "flex";
                    commentBars[i - 1].setAttribute("toBeEdited", "true");
                    commentEditors[i - 1].html.set(commentContents[i].innerHTML.replace(`<p>${tagLinks[i - 1].innerHTML}</p>`, ""));
                } else {
                    commentBars[commentBars.length - 1].setAttribute("toBeEdited", "true");
                    commentEditors[commentBars.length - 1].html.set(commentContents[i].innerHTML);
                }
            } else {
                commentBars[i + 1].style.display = "flex";
                commentBars[i + 1].setAttribute("toBeEdited", "true");
                console.log(commentEditors[i], commentEditors[i + 1]);
                commentEditors[i + 1].html.set(commentContents[i + 1].innerHTML.replace(`<p>${tagLinks[i].innerHTML}</p>`, ""));
            }
        })

        deleteCommentButtons[i].addEventListener("click", function () {
            if (onRepliesPage) {
                if (i !== 0)
                    CommentRequests.delete(commentFormButtons[i - 1].getAttribute("data-comment-id"), currentUser);
                else
                    CommentRequests.delete(
                        commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"),
                        currentUser,
                        commentFormButtons[commentFormButtons.length - 1].getAttribute("data-post-id")
                    );
            } else {
                CommentRequests.delete(commentFormButtons[i + 1].getAttribute("data-comment-id"), currentUser);
            }
        })

        commentReactions[i].addEventListener("click", function () {
            commentReactionsContainerBlocks[i].style.display = "flex";
        })

        commentMenuReactions[i].addEventListener("click", function () {
            commentReactionsContainerBlocks[i].style.display = "flex";
        })

        commentReactionsContainerClose[i].addEventListener("click", function (evt) {
            evt.stopPropagation();
            commentReactionsContainerBlocks[i].style.display = "none";
        })

        commentLikeButtons[i].addEventListener("click", async function () {
            let result,
                likesNumber = Number(likesNumbers[i].innerText),
                dislikesNumber = Number(dislikesNumbers[i].innerText);

            if (onRepliesPage) {
                if (i !== 0)
                    result = await CommentRequests.react(commentFormButtons[i - 1].getAttribute("data-comment-id"));
                else
                    result = await CommentRequests.react(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"))
            } else {
                result = await CommentRequests.react(commentFormButtons[i + 1].getAttribute("data-comment-id"));
            }

            if (result) {
                if (getComputedStyle(commentDislikeButtons[i]).color === 'rgb(255, 0, 0)') {
                    dislikesNumber -= 1;
                    dislikesNumbers[i].innerText = dislikesNumber;
                    menuDislikesNumbers[i].innerText = dislikesNumber;

                    likesNumber += 1;
                    likesNumbers[i].innerText = likesNumber;
                    menuLikesNumbers[i].innerText = likesNumber;

                    this.style.color = 'var(--principal-color)';
                    commentDislikeButtons[i].style.color = 'inherit';
                } else if (getComputedStyle(this).color === 'rgb(35, 182, 217)') {
                    likesNumber -= 1;
                    likesNumbers[i].innerText = likesNumber;
                    menuLikesNumbers[i].innerText = likesNumber;
                    this.style.color = 'inherit';
                } else {
                    likesNumber += 1;
                    likesNumbers[i].innerText = likesNumber;
                    menuLikesNumbers[i].innerText = likesNumber;

                    this.style.color = 'var(--principal-color)';
                    commentDislikeButtons[i].style.color = 'inherit';
                }

                commentReactionsContainers[i].contentWindow.location.reload();
            }
        });

        commentDislikeButtons[i].addEventListener("click", async function () {
            let result,
                likesNumber = Number(likesNumbers[i].innerText),
                dislikesNumber = Number(dislikesNumbers[i].innerText);

            if (onRepliesPage) {
                if (i !== 0)
                    result = await CommentRequests.react(commentFormButtons[i - 1].getAttribute("data-comment-id"), "dislike");
                else
                    result = await CommentRequests.react(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"), "dislike");
            } else
                result = await CommentRequests.react(commentFormButtons[i + 1].getAttribute("data-comment-id"));

            if (result) {
                if (getComputedStyle(commentLikeButtons[i]).color === 'rgb(35, 182, 217)') {
                    likesNumber -= 1;
                    likesNumbers[i].innerText = likesNumber;
                    menuLikesNumbers[i].innerText = likesNumber;

                    dislikesNumber += 1;
                    dislikesNumbers[i].innerText = dislikesNumber;
                    menuDislikesNumbers[i].innerText = dislikesNumber;

                    this.style.color = 'red';
                    commentLikeButtons[i].style.color = 'inherit';
                } else if (getComputedStyle(this).color === 'rgb(255, 0, 0)') {
                    dislikesNumber -= 1;
                    dislikesNumbers[i].innerText = dislikesNumber;
                    menuDislikesNumbers[i].innerText = dislikesNumber;
                    this.style.color = 'inherit';
                } else {
                    dislikesNumber += 1;
                    dislikesNumbers[i].innerText = dislikesNumber;
                    menuDislikesNumbers[i].innerText = dislikesNumber;

                    this.style.color = 'red';
                    commentLikeButtons[i].style.color = 'inherit';
                }

                commentReactionsContainers[i].contentWindow.location.reload();
            }
        })

        commentDates[i].addEventListener("mouseover", function () {
            this.innerText = dayjs(allDates[i]).format('dddd, MMMM D, YYYY');
        })

        commentDates[i].addEventListener("mouseleave", function () {
            this.innerText = CommentRequests.reduceDateFormat(dayjs(allDates[i]).fromNow());
        })

        commentMenuDates[i].addEventListener("mouseover", function () {
            this.innerText = dayjs(allDates[i]).format('dddd, MMMM D, YYYY');
        })

        commentMenuDates[i].addEventListener("mouseleave", function () {
            this.innerText = initialDateTexts[i];
        })

        hideCommentButtons[i].addEventListener("click", async function () {
            let result;

            if (onRepliesPage) {
                if (i !== 0)
                    result = await CommentRequests.hide(commentFormButtons[i - 1].getAttribute("data-comment-id"));
                else
                    result = await CommentRequests.hide(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"));
            } else
                result = await CommentRequests.hide(commentFormButtons[i + 1].getAttribute("data-comment-id"));

            if (result) {
                if (onRepliesPage) {
                    commentContents[i].innerHTML = "<p class='hide-paragraph'>This comment is hidden</p>";
                } else {
                    commentContents[i + 1].innerHTML = "<p class='hide-paragraph'>This comment is hidden</p>";
                }

                showCommentButtons[i].style.display = "block";
                this.style.display = "none";
            }
        })

        showCommentButtons[i].addEventListener("click", async function () {
            let result;

            if (onRepliesPage) {
                if (i !== 0)
                    result = await CommentRequests.show(commentFormButtons[i - 1].getAttribute("data-comment-id"));
                else
                    result = await CommentRequests.show(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"));
            } else
                result = await CommentRequests.show(commentFormButtons[i + 1].getAttribute("data-comment-id"));

            if (result) {
                if (onRepliesPage) {
                    commentContents[i].innerHTML = result;
                } else {
                    commentContents[i + 1].innerHTML = result;
                }

                hideCommentButtons[i].style.display = "block";
                this.style.display = "none";
            }
        })

        reportCommentButtons[i].addEventListener("click", async function () {
            if (onRepliesPage) {
                if (i !== 0)
                    await CommentRequests.report(commentFormButtons[i - 1].getAttribute("data-comment-id"));
                else
                    await CommentRequests.report(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-comment-id"));
            } else {
                await CommentRequests.report(commentFormButtons[i + 1].getAttribute("data-comment-id"));
            }
        })

        blockUserButtons[i].addEventListener("click", async function () {
            if (onRepliesPage) {
                if (i !== 0)
                    await UserRequests.block(commentFormButtons[i - 1].getAttribute("data-user-id"));
                else
                    await UserRequests.block(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-user-id"));
            } else {
                await UserRequests.block(commentFormButtons[i + 1].getAttribute("data-user-id"));
            }
        })

        unblockUserButtons[i].addEventListener("click", async function () {
            if (onRepliesPage) {
                if (i !== 0)
                    await UserRequests.unblock(commentFormButtons[i - 1].getAttribute("data-user-id"));
                else
                    await UserRequests.unblock(commentFormButtons[commentFormButtons.length - 1].getAttribute("data-user-id"));
            } else {
                await UserRequests.unblock(commentFormButtons[i + 1].getAttribute("data-user-id"));
            }
        })
    }
} else {
    for (let i = 0; i < commentFormButtons.length; i++) {
        commentFormButtons[i].addEventListener("click", function () {
            if (!onRepliesPage && i === 0) {
                CommentRequests.submit(commentEditors[i], null, false, this.getAttribute("data-post-id"));
            } else {
                if (commentBars[i].getAttribute("toBeEdited") !== "true")
                    CommentRequests.submit(commentEditors[i], this.getAttribute("data-comment-id"));
                else
                    CommentRequests.submit(commentEditors[i], this.getAttribute("data-comment-id"), true);
            }

            this.style.display = "none";
        })
    }
}

