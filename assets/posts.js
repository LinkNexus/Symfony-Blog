// Importing all necessary packages

import "./styles/posts.css";
import FroalaEditor from "froala-editor";
import 'froala-editor/css/froala_editor.pkgd.min.css';
import 'froala-editor/css/froala_style.min.css';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import utc from "dayjs/plugin/utc";

// Load your languages
import 'froala-editor/js/languages/en_gb.js';

// Load all plugins, or specific ones
import 'froala-editor/js/plugins.pkgd.min.js';
import 'froala-editor/css/plugins.pkgd.min.css';
import 'froala-editor/css/themes/dark.min.css';
import CommentRequests from "./comment-requests";
import PostRequests from "./post-requests";

window.FroalaEditor = FroalaEditor;

/**
 * @param editor Editor instance
 * @param error Error object generated by Froala
 * @param response Response object coming from the server
 */
function froalaDisplayError(editor, error, response) {
    alert(`Error ${error.code}: ${error.message}`);
}

window.froalaDisplayError = froalaDisplayError;

dayjs.extend(relativeTime);
dayjs.extend(utc);

// Get the infos of the current connected user
const currentUser = await CommentRequests.getCurrentUser();

function reactToPost(id, reaction = "like") {
    const url = "/post/" + id + "/react";
    const data = {
        reaction: reaction
    }

    return fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest' // Important for Symfony to detect AJAX request
        },
        body: JSON.stringify(data)
    })
        .then(response => response.json())
        .then(data => {
            return true;
        })
        .catch((error) => {
            console.error('Error:', error);
            return false;
    });
}

// Definition of the necessary variables of the HTML Elements
const postMenus = document.querySelectorAll(".post-menu"),
    postMenuBlocks = document.querySelectorAll(".post-menu-block"),
    postMenuButtons = document.querySelectorAll(".post-menu-button"),
    seeHistoryButtons = document.querySelectorAll(".see-history"),
    editPostButtons = document.querySelectorAll(".edit-post"),
    deletePostButtons = document.querySelectorAll(".delete-post"),
    likeButtons = document.querySelectorAll(".like"),
    dislikeButtons = document.querySelectorAll(".dislike"),
    shareButtons = document.querySelectorAll(".share"),
    allLikes = document.querySelectorAll(".likes-number"),
    allDislikes = document.querySelectorAll(".dislikes-number"),
    selectedFilters = document.querySelectorAll(".selected-filter"),
    filtersContainers = document.querySelectorAll(".filters"),
    allFilters = document.querySelectorAll(".filter"),
    commentInputs = document.querySelectorAll(".comment-input"),
    commentFormButtons = document.querySelectorAll('.comment-bar form svg'),
    storiesSection = document.querySelector(".stories-section"),
    postReactsNumbers = document.querySelectorAll(".post-reacts-number"),
    postReactionsContainerBlocks = document.querySelectorAll(".post-reactions-container-block"),
    postReactionsContainersCloseButtons = document.querySelectorAll(".post-reactions-container-close"),
    newestCommentsFilter = document.querySelector(".newest-comments"),
    oldestCommentsFilter = document.querySelector(".oldest-comments"),
    moreReactionsFilter = document.querySelector(".more-reactions"),
    lessReactionsFilter = document.querySelector(".less-reactions"),
    createCommentBar = document.getElementById("create-comment-bar");

const url = new URL(location.href);
const queryParams = new URLSearchParams(location.search),
    filterSlug = queryParams.get("filter");

// Checking if we are in the homepage or not
if (storiesSection) {
    for (const selectedFilter of selectedFilters) {
        selectedFilter.style.display = "none";
    }
}

let allLikeNumbers = [],
    allDislikeNumbers = [],
    AllFilters = [],
    filters = [];

for (let i = 0; i < allLikes.length; i++) {
    allLikeNumbers.push(Number(allLikes[i].innerText));
    allDislikeNumbers.push(Number(allDislikes[i].innerText));
}

for (let i = 0; i < allFilters.length; i++) {
    if (filters.length !== 4) {
        filters.push(allFilters[i]);
    }

    if (filters.length === 4) {
        AllFilters.push(filters);
        filters = [];
    }
}

for (let i = 0; i < postMenus.length; i++) {
    postReactsNumbers[i].addEventListener("click", function () {
        postReactionsContainerBlocks[i].style.display = "flex";
    });

    postReactionsContainersCloseButtons[i].addEventListener("click", function () {
        postReactionsContainerBlocks[i].style.display = "none";
    })

    postMenuBlocks[i].addEventListener("click", function (evt) {
        this.style.display = "none";
        evt.stopPropagation();
    });

    postMenuButtons[i].addEventListener('click', () => {
        postMenuBlocks[i].style.display = getComputedStyle(postMenuBlocks[i]).display === "flex" ? "none" : "flex";
    });

    if (seeHistoryButtons.length !== 0) {
        seeHistoryButtons[i].addEventListener('click', () => {
            window.location.href = "/post/" + postMenus[i].getAttribute("data-post-id") + "/history";
        });
    }

    if (editPostButtons.length !== 0) {
        editPostButtons[i].addEventListener('click', () => {
            window.location.href = "/post/" + postMenus[i].getAttribute("data-post-id") + "/edit";
        })
    }

    if (deletePostButtons.length !== 0) {
        deletePostButtons[i].addEventListener('click', async () => {
            // if (window.confirm("Do you really want to delete this post?")) {
                // window.location.href = "/post/" + postMenus[i].getAttribute("data-post-id") + "/delete";
            //}

            await PostRequests.delete(postMenus[i].getAttribute("data-post-id"), currentUser);
        })
    }

    likeButtons[i].addEventListener('click', async function (evt) {
        evt.preventDefault();

        if (await reactToPost(postMenus[i].getAttribute("data-post-id"))) {
            if (getComputedStyle(dislikeButtons[i]).color === 'rgb(255, 0, 0)') {
                allDislikeNumbers[i] -= 1;
                allDislikes[i].innerText = allDislikeNumbers[i];

                allLikeNumbers[i] += 1;
                allLikes[i].innerText = allLikeNumbers[i];

                this.style.color = 'var(--principal-color)';
                dislikeButtons[i].style.color = 'inherit';
            } else if (getComputedStyle(this).color === 'rgb(35, 182, 217)') {
                allLikeNumbers[i] -= 1;
                allLikes[i].innerText = allLikeNumbers[i];
                this.style.color = 'inherit';
            } else {
                allLikeNumbers[i] += 1;
                allLikes[i].innerText = allLikeNumbers[i];

                this.style.color = 'var(--principal-color)';
                dislikeButtons[i].style.color = 'inherit';
            }
        }
    })

    dislikeButtons[i].addEventListener('click', async function (evt) {
        evt.preventDefault();

        if (await reactToPost(postMenus[i].getAttribute("data-post-id"), 'dislike')) {
            if (getComputedStyle(likeButtons[i]).color === 'rgb(35, 182, 217)') {
                allLikeNumbers[i] -= 1;
                allLikes[i].innerText = allLikeNumbers[i];

                allDislikeNumbers[i] += 1;
                allDislikes[i].innerText = allDislikeNumbers[i];

                this.style.color = 'red';
                likeButtons[i].style.color = 'inherit';
            } else if (getComputedStyle(this).color === 'rgb(255, 0, 0)') {
                allDislikeNumbers[i] -= 1;
                allDislikes[i].innerText = allDislikeNumbers[i];
                this.style.color = 'inherit';
            } else {
                allDislikeNumbers[i] += 1;
                allDislikes[i].innerText = allDislikeNumbers[i];

                this.style.color = 'red';
                likeButtons[i].style.color = 'inherit';
            }
        }
    })

    shareButtons[i].addEventListener("click", function (evt) {
        evt.preventDefault();
        /* navigator.clipboard.writeText(window.location.protocol + "//" + window.location.hostname + "/post/" + postMenus[i].getAttribute("data-post-id"))
            .then(() => {
                alert('Link copied to clipboard!');
            }).catch(err => {
            alert('Failed to copy Link');
        })
        ; */

        navigator.share({
            url: window.location.protocol + "//" + window.location.hostname + "/post/" + postMenus[i].getAttribute("data-post-id"),
            text: `See ${currentUser.username} post on TheNexus`,
        })
            .then(() => {
                alert("Successful shared article")
            })
            .catch(err => console.log("Couldn't share the post"));
    })

    selectedFilters[i].addEventListener("click", function () {
        filtersContainers[i].style.display = getComputedStyle(filtersContainers[i]).display === "flex" ? "none" : "flex";
    })

    if (!storiesSection) {
        newestCommentsFilter.addEventListener("click", function () {
            location.href = "?filter=newest";
        })

        oldestCommentsFilter.addEventListener("click", function () {
            location.href = "?filter=oldest";
        })

        moreReactionsFilter.addEventListener("click", function () {
            location.href = '?filter=more-reactions';
        })

        lessReactionsFilter.addEventListener("click", function () {
            location.href = '?filter=less-reactions';
        })
    }

    for (const filter of AllFilters[i]) {
        if (filter.classList.contains(filterSlug + "-comments")) {
            selectedFilters[i].firstElementChild.innerText = filterSlug.charAt(0).toUpperCase() + filterSlug.slice(1);
        }

        if (filterSlug === "more-reactions" || filterSlug === "less-reactions") {
            selectedFilters[i].firstElementChild.innerText = filterSlug.split("-")[0].charAt(0).toUpperCase() + filterSlug.split("-")[0].slice(1)  + " " + filterSlug.split("-")[1].charAt(0).toUpperCase() + filterSlug.split("-")[1].slice(1)
        }
    }
}